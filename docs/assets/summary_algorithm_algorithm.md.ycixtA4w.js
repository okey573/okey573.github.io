import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.CbHUKvme.js";const p=JSON.parse('{"title":"算法","description":"","frontmatter":{"title":"算法","lastUpdated":"Thu May 09 2024 10:04:46 GMT+0800 (中国标准时间)"},"headers":[],"relativePath":"summary/algorithm/algorithm.md","filePath":"summary/algorithm/algorithm.md","lastUpdated":1715221215000}'),l={name:"summary/algorithm/algorithm.md"},i=r('<h1 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h1><ul><li>排序算法：快速排序、归并排序、计数排序</li><li>搜索算法：回溯、递归、剪枝技巧</li><li>图论：最短路、最小生成树、网络流建模</li><li>动态规划：背包问题、最长子序列、计数问题</li><li>基础技巧：分治、倍增、二分、贪心</li></ul><h2 id="滑动窗口" tabindex="-1">滑动窗口 <a class="header-anchor" href="#滑动窗口" aria-label="Permalink to &quot;滑动窗口&quot;">​</a></h2><ul><li>滑动窗口初始化完成以后，滑动时只需要更新窗口的第一个元素和最后一个元素</li><li>滑动窗口的遍历条件：startIndex = 0; startIndex &lt;= arrayLength - windowSize; startIndex++</li></ul><h3 id="例题" tabindex="-1">例题 <a class="header-anchor" href="#例题" aria-label="Permalink to &quot;例题&quot;">​</a></h3><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/" target="_blank" rel="noreferrer">438. 找到字符串中所有字母异位词</a></p><h2 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h2><ul><li>动态规划的重点是找出转移方程</li><li>有时候 dp 的条件不一定要完全满足题目的要求，最终的结果也可以通过最后的 dp 数组再经过一些计算得到</li></ul><h3 id="例题-1" tabindex="-1">例题 <a class="header-anchor" href="#例题-1" aria-label="Permalink to &quot;例题&quot;">​</a></h3><p><a href="https://leetcode.cn/problems/maximum-subarray" target="_blank" rel="noreferrer">53. 最大子数组和</a></p>',10),o=[i];function n(s,h,d,c,m,_){return t(),e("div",null,o)}const f=a(l,[["render",n]]);export{p as __pageData,f as default};
