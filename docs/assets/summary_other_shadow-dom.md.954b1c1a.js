import{_ as s,o as a,c as o,a as e}from"./app.a648a532.js";const y=JSON.parse('{"title":"shadow dom","description":"","frontmatter":{"title":"shadow dom"},"headers":[{"level":2,"title":"什么是 shadow DOM","slug":"什么是-shadow-dom","link":"#什么是-shadow-dom","children":[]},{"level":2,"title":"查看 shadow dom","slug":"查看-shadow-dom","link":"#查看-shadow-dom","children":[]},{"level":2,"title":"shadow dom 的用法","slug":"shadow-dom-的用法","link":"#shadow-dom-的用法","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"summary/other/shadow-dom.md","lastUpdated":1698999612000}'),n={name:"summary/other/shadow-dom.md"},l=e(`<h1 id="shadow-dom" tabindex="-1">Shadow DOM <a class="header-anchor" href="#shadow-dom" aria-hidden="true">#</a></h1><p><em>qiankun.js 采用了 shadow dom</em></p><h2 id="什么是-shadow-dom" tabindex="-1">什么是 shadow DOM <a class="header-anchor" href="#什么是-shadow-dom" aria-hidden="true">#</a></h2><p><strong>shadow dom</strong>（影子 dom）能够为 web 组件中的 dom 和 css 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 dom 结构插入编写好的 dom 元素</p><p>但是插入的 shadow dom 会与主文档的 dom 保持分离，也就是说 shadow dom 不存在于主 dom 树上</p><p>类似 <code>input</code>, <code>video</code>, <code>audio</code>, 等标签，明明就是一个空元素，却能在页面上渲染出各种复杂的内容，就是因为采用了 shadow dom</p><h2 id="查看-shadow-dom" tabindex="-1">查看 shadow dom <a class="header-anchor" href="#查看-shadow-dom" aria-hidden="true">#</a></h2><p>以 chrome 为例。打开控制台，右上角齿轮按钮设置 -&gt; Preference -&gt; Elements -&gt; Show user anent shadow DOM</p><h2 id="shadow-dom-的用法" tabindex="-1">shadow dom 的用法 <a class="header-anchor" href="#shadow-dom-的用法" aria-hidden="true">#</a></h2><ul><li>使用 <strong>attachShadow</strong> api 创建一个 shadow dom。 attachShadow 接受一个对象配置，改对象有一个 <strong>mode</strong> 属性，值可以是 open 或者 closed</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> shadow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> elementRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShadow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> shadow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> elementRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachShadow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">closed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 Element.shadowRoot 属性：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myShadowDom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myCustomElem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shadowRoot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>将 Shadow DOM 附加到一个元素之后，就可以使用 DOM APIs 对它进行操作，就和处理常规 DOM 一样</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> para </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">shadow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(para)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>要注意的是，不是每一种类型的元素都可以附加到 shadow root（影子根）下面。出于安全考虑，一些元素不能使用 shadow DOM</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-hidden="true">#</a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noreferrer">使用 shadow DOM</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/attachShadow" target="_blank" rel="noreferrer">Element.attachShadow()</a></p></li></ul>`,18),p=[l];function t(d,r,c,h,i,D){return a(),o("div",null,p)}const C=s(n,[["render",t]]);export{y as __pageData,C as default};
