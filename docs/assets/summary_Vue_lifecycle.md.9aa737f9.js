import{_ as e,o as i,c as a,a as l}from"./app.70cd0a3a.js";const r="/docs/images/vue2_lifecycle.png",t="/docs/images/vue3_lifecycle.png",m=JSON.parse('{"title":"生命周期","description":"","frontmatter":{"title":"生命周期"},"headers":[{"level":2,"title":"vue2 生命周期","slug":"vue2-生命周期","link":"#vue2-生命周期","children":[]},{"level":2,"title":"vue3 生命周期","slug":"vue3-生命周期","link":"#vue3-生命周期","children":[]},{"level":2,"title":"父子组件生命周期执行顺序","slug":"父子组件生命周期执行顺序","link":"#父子组件生命周期执行顺序","children":[]}],"relativePath":"summary/Vue/lifecycle.md","lastUpdated":1679542814000}'),d={name:"summary/Vue/lifecycle.md"},o=l('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h1><p>vue 实例从创建到销毁的过程，具体来说就是 vue 实例从开始创建、初始化数据、编译模板、挂载 Dom、渲染数据、更新数据、最后销毁这样的一个过程</p><h2 id="vue2-生命周期" tabindex="-1">vue2 生命周期 <a class="header-anchor" href="#vue2-生命周期" aria-hidden="true">#</a></h2><ol><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>activated(keep-alive组件特有)</li><li>deactivated(keep-alive组件特有)</li><li>beforeDestroy</li><li>destroyed</li><li>errorCaptured(2.5.0+ 新增)</li></ol><p><img src="'+r+'" alt="生命周期"></p><h2 id="vue3-生命周期" tabindex="-1">vue3 生命周期 <a class="header-anchor" href="#vue3-生命周期" aria-hidden="true">#</a></h2><p>vue3 的生命周期，在使用时，区分选项式和组合式</p><h4 id="选项式" tabindex="-1">选项式 <a class="header-anchor" href="#选项式" aria-hidden="true">#</a></h4><ol><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeUnmount</li><li>unmounted</li><li>errorCaptured</li><li>renderTracked(dev only)</li><li>renderTriggered(dev only)</li><li>activated(keep-alive组件特有)</li><li>deactivated(keep-alive组件特有)</li><li>serverPrefetch(ssr only 当组件实例在服务器上被渲染之前要完成的异步函数)</li></ol><h4 id="组合式" tabindex="-1">组合式 <a class="header-anchor" href="#组合式" aria-hidden="true">#</a></h4><ol start="0"><li>setup(beforeCreate &amp; created)</li><li>onBeforeMount</li><li>onMounted</li><li>onBeforeUpdate</li><li>onUpdated</li><li>onBeforeUnmount</li><li>onUnmounted</li><li>onErrorCaptured</li><li>onRenderTracked(dev only)</li><li>onRenderTriggered(dev only)</li><li>onActivated(keep-alive组件特有)</li><li>onDeactivated(keep-alive组件特有)</li><li>onServerPrefetch(ssr only 当组件实例在服务器上被渲染之前要完成的异步函数)</li></ol><p><img src="'+t+'" alt="生命周期"></p><h2 id="父子组件生命周期执行顺序" tabindex="-1">父子组件生命周期执行顺序 <a class="header-anchor" href="#父子组件生命周期执行顺序" aria-hidden="true">#</a></h2><h4 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-hidden="true">#</a></h4><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><h4 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-hidden="true">#</a></h4><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p><h4 id="销毁阶段" tabindex="-1">销毁阶段 <a class="header-anchor" href="#销毁阶段" aria-hidden="true">#</a></h4><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p><p>规律就是：父组件先开始执行，然后等到子组件执行完，父组件收尾。</p>',20),n=[o];function c(s,h,u,p,f,v){return i(),a("div",null,n)}const g=e(d,[["render",c]]);export{m as __pageData,g as default};
