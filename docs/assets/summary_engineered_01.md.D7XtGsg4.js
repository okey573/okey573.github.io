import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.CbHUKvme.js";const m=JSON.parse('{"title":"总览","description":"","frontmatter":{"title":"总览"},"headers":[],"relativePath":"summary/engineered/01.md","filePath":"summary/engineered/01.md","lastUpdated":1719304249000}'),o={name:"summary/engineered/01.md"},i=r('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h1><h2 id="什么是前端工程化" tabindex="-1">什么是前端工程化 <a class="header-anchor" href="#什么是前端工程化" aria-label="Permalink to &quot;什么是前端工程化&quot;">​</a></h2><p>前端工程化可以提升开发体验、提高开发效率和质量、提升应用的访问性能，一切以提高效率、降低成本、质量保证为目的的手段都属于工程化</p><h2 id="前端工程化有哪些模块" tabindex="-1">前端工程化有哪些模块 <a class="header-anchor" href="#前端工程化有哪些模块" aria-label="Permalink to &quot;前端工程化有哪些模块&quot;">​</a></h2><h4 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h4><p>将代码功能做拆分，分成独立地单能相互依赖的片段。</p><h4 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h4><p>组件化是 UI 层面上的更细粒度的拆分，一种类似 div 等原生元素的 “自定义元素”。</p><p>组件有自己的 HTML、CSS 和 JS，同时有自己的状态，并支持嵌入到其他组件中并接受外部的数据，可以进行复用。组件化可以看作是 UI 层组织方式的一种模块化。</p><h4 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-label="Permalink to &quot;规范化&quot;">​</a></h4><p>目录结构规范，代码规范，注释规范，git工作流规范，交互规范等等</p><h4 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h4><p>CI/CD 工具有很多：Jenkins, GitLab CI/CD, GitHub Action, Docker 和 k8s 等</p><h4 id="构建工具" tabindex="-1">构建工具 <a class="header-anchor" href="#构建工具" aria-label="Permalink to &quot;构建工具&quot;">​</a></h4><p>webpack vite 等等</p><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h4><p>babel monorepo hmr 等等</p>',17),n=[i];function h(l,d,s,c,p,_){return t(),e("div",null,n)}const b=a(o,[["render",h]]);export{m as __pageData,b as default};
