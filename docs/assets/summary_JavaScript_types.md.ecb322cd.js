import{_ as t,c as e,o as i,a as l}from"./app.744f3bc8.js";const m=JSON.parse('{"title":"变量类型","description":"","frontmatter":{"title":"变量类型"},"headers":[{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":2,"title":"引用类型（对象）","slug":"引用类型-对象","link":"#引用类型-对象","children":[]}],"relativePath":"summary/JavaScript/types.md","lastUpdated":1677500767000}'),a={name:"summary/JavaScript/types.md"},r=l('<p>变量类型可分为基本类型和引用类型（对象）</p><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-hidden="true">#</a></h2><p>在 JavaScript 中，基本类型（基本数值、基本数据类型）是一种既非对象也无方法或属性 (en-US)的数据。有 7 种原始数据类型</p><ul><li>string</li><li>number</li><li>bigint</li><li>boolean</li><li>undefined</li><li>symbol</li><li>null</li></ul><p>所有基本类型的值都是不可改变的。但需要注意的是，基本类型本身和一个赋值为基本类型的变量的区别。变量会被赋予一个新值，而基本类型不能像数组、对象以及函数那样被改变。</p><p>基本类型没有方法，但仍然表现得像有方法一样。当在基本类型上访问属性时，JavaScript 自动将值装入包装器对象中，并访问该对象上的属性。例如，&quot;foo&quot;.includes(&quot;f&quot;) 隐式创建了一个 String 包装对象，并在该对象上调用 String.prototype.includes()。这种自动装箱行为在 JavaScript 代码中是无法观察到的，但却是各种行为的一个很好的心理模型——例如，为什么“改变”基本类型不起作用（因为 str.Foo = 1 不是赋值给 str 本身的 Foo 属性，而是赋值给了一个临时包装器对象）</p><h2 id="引用类型-对象" tabindex="-1">引用类型（对象） <a class="header-anchor" href="#引用类型-对象" aria-hidden="true">#</a></h2><ul><li>Object</li><li>Function</li><li>Date</li><li>一大堆...</li></ul>',8),n=[r];function o(s,c,d,p,_,u){return i(),e("div",null,n)}const S=t(a,[["render",o]]);export{m as __pageData,S as default};
