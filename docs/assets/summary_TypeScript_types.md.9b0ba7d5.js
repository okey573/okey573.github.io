import{_ as e,c as t,o as i,a as l}from"./app.c6564c1c.js";const y=JSON.parse('{"title":"类型","description":"","frontmatter":{"title":"类型"},"headers":[{"level":2,"title":"高级or复合类型","slug":"高级or复合类型","link":"#高级or复合类型","children":[]}],"relativePath":"summary/TypeScript/types.md","lastUpdated":1678114510000}'),o={name:"summary/TypeScript/types.md"},c=l('<h2 id="高级or复合类型" tabindex="-1">高级or复合类型 <a class="header-anchor" href="#高级or复合类型" aria-hidden="true">#</a></h2><ul><li><code>&amp;</code> 交叉类型</li><li><code>|</code> 联合类型</li><li><code>keyof</code> 属性keys值</li><li><code>infer</code> <strong>还没搞懂</strong></li><li><code>intrinsic</code> <strong>一个内置关键字，还没搞懂</strong></li><li><code>Partial&lt;T&gt;</code> 让T类型中的所有属性可选</li><li><code>Required&lt;T&gt;</code> 让T类型中的所有属性必选</li><li><code>Readonly&lt;T&gt;</code> 让T类型中的所有属性只读</li><li><code>Pick&lt;T, K extends keyof T&gt;</code> 从T中，选K对应的一组属性</li><li><code>Record&lt;K extends keyof any, T&gt;</code> K对应一组属性，都赋予T对应的类型</li><li><code>Exclude&lt;T, U&gt;</code> 从T中剔除可以赋值给U的类型</li><li><code>Extract&lt;T, U&gt;</code> 提取T中可以赋值给U的类型</li><li><code>Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code> 从Type中选取所有的属性值，然后移除属性名在Keys中的属性值</li><li><code>NonNullable&lt;T&gt;</code> 从T中剔除null和undefined</li><li><code>Parameters&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never</code></li><li><code>ConstructorParameters&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: infer P) =&gt; any ? P : never</code></li><li><code>ReturnType&lt;T&gt;</code> 获取函数返回值类型。</li><li><code>InstanceType&lt;T&gt;</code> 获取构造函数类型的实例类型。</li><li><code>Uppercase&lt;S extends string&gt; = intrinsic</code></li><li><code>Lowercase&lt;S extends string&gt; = intrinsic</code></li><li><code>Capitalize&lt;S extends string&gt; = intrinsic</code></li><li><code>Uncapitalize&lt;S extends string&gt; = intrinsic</code></li></ul>',2),d=[c];function n(r,a,s,g,T,p){return i(),t("div",null,d)}const u=e(o,[["render",n]]);export{y as __pageData,u as default};
