import{_ as e,o as a,c as t,a as r}from"./app.3cc47310.js";const u=JSON.parse('{"title":"中间人攻击","description":"","frontmatter":{"title":"中间人攻击"},"headers":[{"level":2,"title":"什么是中间人攻击","slug":"什么是中间人攻击","link":"#什么是中间人攻击","children":[]},{"level":2,"title":"防御办法","slug":"防御办法","link":"#防御办法","children":[]}],"relativePath":"summary/security/middle-attack.md","lastUpdated":1679993466000}'),d={name:"summary/security/middle-attack.md"},i=r('<h1 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-hidden="true">#</a></h1><h2 id="什么是中间人攻击" tabindex="-1">什么是中间人攻击 <a class="header-anchor" href="#什么是中间人攻击" aria-hidden="true">#</a></h2><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。中间人攻击的本质是客户端和服务端之间的认证和信任问题。</p><h2 id="防御办法" tabindex="-1">防御办法 <a class="header-anchor" href="#防御办法" aria-hidden="true">#</a></h2><p>对称加密、非对称加密、混合加密技术都没有有效防止中间人攻击，因为中间人可以截取首次传输的密钥并偷天换日，而客户端或服务端并无法得知。HTTPS作为防止中间人攻击的终极手段，引入证书机制解决了客户端和服务端的信任问题，从而较为有效的防止了中间人攻击。</p>',5),s=[i];function c(n,l,_,h,o,p){return a(),t("div",null,s)}const f=e(d,[["render",c]]);export{u as __pageData,f as default};
